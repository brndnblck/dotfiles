#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/config"


source "$(dirname "${BASH_SOURCE[0]}")/ansi"


source "$(dirname "${BASH_SOURCE[0]}")/logging"


source "$(dirname "${BASH_SOURCE[0]}")/execution"


source "$(dirname "${BASH_SOURCE[0]}")/validation"


source "$(dirname "${BASH_SOURCE[0]}")/privileges"


source "$(dirname "${BASH_SOURCE[0]}")/packaging"


source "$(dirname "${BASH_SOURCE[0]}")/errors"



colored_divider() {
    local char="${1:-â–“}"
    local width="${2:-$INTERFACE_WIDTH}"
    # shellcheck disable=SC2046
    gum style --foreground "$INTERFACE_SECONDARY" "$(printf "${char}%.0s" $(seq 1 "$width"))"
}


system_pause() {
    local message="${1:-WORKING}"
    local duration="${2:-$DEFAULT_SYSTEM_PAUSE_DURATION}"
    gum style --foreground "$INTERFACE_SECONDARY" "${message}..."
    sleep "$duration"
}




if [ -z "${DOTFILES_PARENT_DIR:-}" ] && [ -z "${PARENT_DIR:-}" ]; then
    SCRIPT_CORE_DIR=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
    DOTFILES_PARENT_DIR=$(dirname "$(dirname "$SCRIPT_CORE_DIR")")
    export DOTFILES_PARENT_DIR
fi



get_architecture() {
    local arch
    arch=$(uname -m)
    echo "$arch"
}

get_homebrew_prefix() {
    local arch
    arch=$(get_architecture)
    if [[ "$arch" == "arm64" ]]; then
        echo "$HOMEBREW_PREFIX_ARM"
    else
        echo "$HOMEBREW_PREFIX_INTEL"
    fi
}

get_homebrew_bin() {
    echo "$(get_homebrew_prefix)/bin/brew"
}

setup_homebrew_env() {
    if check_command "brew" "Homebrew"; then
        local brew_bin
        brew_bin=$(get_homebrew_bin)
        eval "$("$brew_bin" shellenv)"
    fi
}



