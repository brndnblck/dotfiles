#!/usr/bin/env bash

# Dotfiles Update Script
# Updates all system packages and configurations

set -euo pipefail

# Check if this script is being called directly (not through main TUI)
if [ -z "${DOTFILES_PARENT_DIR:-}" ]; then
    echo "❌ This script should not be called directly!"
    echo ""
    echo "Please use the main TUI interface:"
    echo "  ./script/main"
    echo ""
    echo "Or run the bootstrap first:"
    echo "  ./script/bootstrap"
    exit 1
fi

CURRENT_DIR=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
DOTFILES_PARENT_DIR=$(dirname "$CURRENT_DIR")
DOTFILES_LOG_FILE="$DOTFILES_PARENT_DIR/tmp/update-$(date +%Y%m%d-%H%M%S).log"
DOTFILES_DEBUG_LOG="$DOTFILES_PARENT_DIR/tmp/debug-update-$(date +%Y%m%d-%H%M%S).log"

# Export for use in helper functions
export DOTFILES_DEBUG_LOG
export DOTFILES_LOG_FILE
export DOTFILES_PARENT_DIR

# Ensure tmp directory exists
mkdir -p "$DOTFILES_PARENT_DIR/tmp"

# Import helpers
source "$CURRENT_DIR/core/common"
source "$CURRENT_DIR/core/dependencies"
source "$CURRENT_DIR/core/ui"

# Main update function
main() {
    show_standard_header
    show_section_header "SYSTEM UPDATE INITIATED"

    # Display log paths and update sequence
    gum style \
        --foreground "$INTERFACE_COLOR" \
        --border normal \
        --border-foreground "$INTERFACE_SECONDARY" \
        --padding "0 1" \
        --width "$((INTERFACE_WIDTH - 1))" \
        "▶ UPDATE SEQUENCE:" \
        "" \
        "  [01] PACKAGE REGISTRY SYNCHRONIZATION" \
        "  [02] SYSTEM COMPONENT UPGRADES" \
        "  [03] APPLICATION BINARY UPDATES" \
        "  [04] CONFIGURATION MATRIX SYNC" \
        "  [05] DEVELOPMENT STACK REFRESH" \
        "  [06] SHELL ENVIRONMENT UPDATES"

    echo ""

    if ! gum confirm "INITIATE UPDATE SEQUENCE?" \
        --prompt.foreground "$INTERFACE_COLOR" \
        --selected.foreground "$INTERFACE_BG_COLOR" \
        --selected.background "$INTERFACE_COLOR" \
        --unselected.foreground "$INTERFACE_COLOR" \
        --affirmative "EXECUTE" \
        --negative "ABORT"; then
        gum style --foreground "$INTERFACE_ERROR" "UPDATE SEQUENCE ABORTED"
        exit 0
    fi

    # Transition to progress display
    show_standard_header
    show_section_header "SYSTEM UPDATE"

    # Display log paths (relative from DOTFILES_PARENT_DIR)
    gum style --foreground "$INTERFACE_SECONDARY" "DEBUG: ${DOTFILES_DEBUG_LOG#"$DOTFILES_PARENT_DIR"/}"
    gum style --foreground "$INTERFACE_SECONDARY" "OUTPUT: ${DOTFILES_LOG_FILE#"$DOTFILES_PARENT_DIR"/}"
    echo ""

    # Set task title for progress display
    export TASK_TITLE="SYSTEM UPDATE"

    # Update Homebrew
    if command -v brew > /dev/null 2>&1; then
        run_with_progressive_spinner "SYNCHRONIZING PACKAGE REGISTRY..." \
            "brew update"

        run_with_progressive_spinner "UPGRADING SYSTEM COMPONENTS..." \
            "brew upgrade"

        run_with_progressive_spinner "UPGRADING APPLICATION BINARIES..." \
            "brew upgrade --cask"
    fi

    # Update Mac App Store apps
    if command -v mas > /dev/null 2>&1; then
        run_with_progressive_spinner "UPDATING APPLICATION STORE REGISTRY..." \
            "mas upgrade"
    fi

    # Update dotfiles and sync configuration
    if command -v chezmoi > /dev/null 2>&1; then
        run_with_progressive_spinner "SYNCHRONIZING CONFIGURATION MATRIX..." \
            "chezmoi update"

        run_with_progressive_spinner "APPLYING CONFIGURATION CHANGES..." \
            "source '$CURRENT_DIR/core/system' && apply_dotfiles_and_shell"
    fi

    # Update development tools
    run_with_progressive_spinner "UPDATING DEVELOPMENT STACK..." \
        "export DOTFILES_PARENT_DIR='$DOTFILES_PARENT_DIR' && source '$CURRENT_DIR/core/common' && source '$CURRENT_DIR/core/dependencies' && ensure_development"

    # Sync package dependencies and applications
    run_with_progressive_spinner "SYNCHRONIZING PACKAGE DEPENDENCIES..." \
        "export DOTFILES_PARENT_DIR='$DOTFILES_PARENT_DIR' && source '$CURRENT_DIR/core/common' && source '$CURRENT_DIR/core/dependencies' && ensure_dependencies"

    run_with_progressive_spinner "SYNCHRONIZING APPLICATION REGISTRY..." \
        "export DOTFILES_PARENT_DIR='$DOTFILES_PARENT_DIR' && source '$CURRENT_DIR/core/common' && source '$CURRENT_DIR/core/dependencies' && ensure_applications"

    # Update system components
    run_with_progressive_spinner "REFRESHING SYSTEM FONTS..." \
        "source '$CURRENT_DIR/core/system' && ensure_fonts"

    show_completion "SYSTEM UPDATE COMPLETE"
    show_footer_prompt
}

# Execute if called directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
