name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1. Setup and Dependencies
  setup:
    name: Setup and Dependencies
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install dependencies and setup environment
        run: make setup

  # 2. Linting and Formatting (parallel after setup)
  lint-and-format:
    name: Linting and Formatting
    runs-on: macos-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install dependencies and setup tools
        run: make setup

      - name: Run formatting and linting checks
        run: make check

  # 3. Documentation (parallel after setup)
  documentation:
    name: Documentation Check
    runs-on: macos-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          # Basic documentation checks
          test -f README.md || { echo "README.md not found"; exit 1; }
          echo "Documentation checks passed"

  # 4. Security Checks (parallel after setup)
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # 5. Smoke Tests (parallel after setup)
  smoke-tests:
    name: Smoke Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-15, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Test script executability
        run: |
          # Verify all main scripts are executable
          chmod +x script/*
          test -x script/bootstrap
          test -x script/main
          test -x script/update
          test -x script/status
          test -x script/setup

      - name: Test helper script sourcing
        run: |
          # Test that helper scripts can be sourced without errors
          cd script/core
          for helper in *; do
            if [ -f "$helper" ]; then
              echo "Testing helper: $helper"
              bash -n "$helper" || { echo "Syntax error in $helper"; exit 1; }
            fi
          done

      - name: Test shell compatibility
        run: |
          # Test scripts work with both bash and zsh
          for shell in bash zsh; do
            if command -v "$shell" >/dev/null 2>&1; then
              echo "Testing with $shell..."
              
              # Test basic script syntax
              for script in script/bootstrap script/main script/update; do
                if [ -f "$script" ]; then
                  echo "Checking $script with $shell"
                  "$shell" -n "$script" || { echo "Syntax error in $script with $shell"; exit 1; }
                fi
              done
            fi
          done

      - name: Test macOS version compatibility
        run: |
          # Verify scripts handle macOS version detection correctly
          sw_vers -productVersion
          arch=$(uname -m)
          echo "Architecture: $arch"
          
          # Test architecture-specific logic
          if [[ "$arch" == "arm64" ]]; then
            expected_prefix="/opt/homebrew"
          else
            expected_prefix="/usr/local"
          fi
          echo "Expected Homebrew prefix: $expected_prefix"

      - name: Test environment variable handling
        run: |
          # Test that scripts handle missing environment variables gracefully
          unset DOTFILES_PARENT_DIR DOTFILES_LOG_FILE DOTFILES_DEBUG_LOG
          
          # Test bootstrap basic functionality
          CURRENT_DIR=$(realpath "script")
          DOTFILES_PARENT_DIR=$(dirname "$CURRENT_DIR")
          export DOTFILES_PARENT_DIR
          
          echo "Testing environment setup..."
          mkdir -p tmp
          echo "Environment test completed"

  # 6. Main Test Suite - runs after linting, docs, security, and integration/compatibility
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [lint-and-format, documentation, security, smoke-tests]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-15, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew/var/homebrew/locks
            /opt/homebrew/var/homebrew/cache
          key: ${{ runner.os }}-homebrew-${{ hashFiles('dependencies/*.brewfile', '.github/workflows/test.yml') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Run tests
        run: make test

  # 7. Test Coverage (final step)
  test-coverage:
    name: Test Coverage Report
    runs-on: macos-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Generate test coverage report
        run: make coverage

  # Release Management (only on main/master branch)
  release:
    name: Release Check
    runs-on: macos-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: [test-coverage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if release is needed
      id: release-check
      run: |
        # Simple version check based on git tags
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        # Count commits since last tag
        commits_since=$(git rev-list ${latest_tag}..HEAD --count 2>/dev/null || echo "999")
        echo "Commits since last tag: $commits_since"
        
        if [ "$commits_since" -gt "0" ]; then
          echo "release-needed=true" >> $GITHUB_OUTPUT
        else
          echo "release-needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Create release
      if: steps.release-check.outputs.release-needed == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release of dotfiles configuration.
          
          Changes in this release:
          - Updated dotfiles configuration
          - Tested on macOS versions: 14, 15
          - All security checks passed
          - All tests passed
        draft: false
        prerelease: false

  # Failure Notification
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format, documentation, security, smoke-tests, test, test-coverage]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "CI pipeline failed. Check the logs for details."
        echo "Failed jobs:"
        echo "- Setup: ${{ needs.setup.result }}"
        echo "- Linting: ${{ needs.lint-and-format.result }}"
        echo "- Documentation: ${{ needs.documentation.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Smoke Tests: ${{ needs.smoke-tests.result }}"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Coverage: ${{ needs.test-coverage.result }}"