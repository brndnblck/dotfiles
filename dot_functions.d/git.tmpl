function git-export() {
  # Description: Clone a git repository without git history (export)
  # Usage: git-export REPO_URL PROJECT_NAME
  # Example: git-export https://github.com/user/template.git my-new-project
  if [ $# -lt 2 ]; then
    echo "Usage: git-export REPO_URL PROJECT_NAME"
    echo "Example: git-export https://github.com/user/repo.git my-project"
    return 1
  fi
  
  local repo_url="$1"
  local project_name="$2"
  
  if [ -d "$project_name" ]; then
    echo "Error: Directory '$project_name' already exists"
    return 1
  fi
  
  echo "Cloning repository..."
  if git clone --quiet --depth=1 "$repo_url" "$project_name"; then
    echo "Removing git history..."
    rm -rf "$project_name"/.git*
    echo "Project exported to: $project_name"
  else
    echo "Error: Failed to clone repository"
    return 1
  fi
}

function git-branch-clean() {
  # Description: Deletes local branches and prunes remote tracking branches
  # Usage: git-branch-clean
  # Example: git-branch-clean
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not in a git repository"
    return 1
  fi
  
  echo "Cleaning merged branches..."
  
  local master_branches=$(git branch --merged=master 2>/dev/null | grep -v master | xargs)
  if [ -n "$master_branches" ]; then
    echo "Deleting branches merged into master: $master_branches"
    git branch -d $master_branches
  fi
  
  local main_branches=$(git branch --merged=main 2>/dev/null | grep -v main | xargs)
  if [ -n "$main_branches" ]; then
    echo "Deleting branches merged into main: $main_branches"
    git branch -d $main_branches
  fi
  
  echo "Pruning remote tracking branches..."
  git fetch --prune
  
  echo "Branch cleanup complete"
}