# Development workflow and git utility functions

git-export() {
    # Description: Clone a git repository without git history (export for templates)
    # Usage: git-export REPO_URL PROJECT_NAME
    # Example: git-export https://github.com/user/template.git my-new-project
    if [ $# -lt 2 ]; then
        echo "Usage: git-export REPO_URL PROJECT_NAME"
        echo "Example: git-export https://github.com/user/repo.git my-project"
        return 1
    fi

    local repo_url="$1"
    local project_name="$2"

    if [ -d "$project_name" ]; then
        echo "Error: Directory '$project_name' already exists"
        return 1
    fi

    echo "Cloning repository..."
    if git clone --quiet --depth=1 "$repo_url" "$project_name"; then
        echo "Removing git history..."
        rm -rf "$project_name"/.git*
        echo "Project exported to: $project_name"
    else
        echo "Error: Failed to clone repository"
        return 1
    fi
}

git-branch-clean() {
    # Description: Delete merged local branches and prune remote tracking branches
    # Usage: git-branch-clean
    # Example: git-branch-clean
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    echo "Cleaning merged branches..."

    local master_branches=$(git branch --merged=master 2> /dev/null | grep -v master | xargs)
    if [ -n "$master_branches" ]; then
        echo "Deleting branches merged into master: $master_branches"
        git branch -d $master_branches
    fi

    local main_branches=$(git branch --merged=main 2> /dev/null | grep -v main | xargs)
    if [ -n "$main_branches" ]; then
        echo "Deleting branches merged into main: $main_branches"
        git branch -d $main_branches
    fi

    echo "Pruning remote tracking branches..."
    git fetch --prune

    echo "Branch cleanup complete"
}

git-current-branch() {
    # Description: Get the current git branch name
    # Usage: git-current-branch
    # Example: git-current-branch
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    git rev-parse --abbrev-ref HEAD
}

git-root() {
    # Description: Navigate to the root of the current git repository
    # Usage: git-root
    # Example: git-root
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    cd "$(git rev-parse --show-toplevel)"
}

git-uncommitted() {
    # Description: Show all uncommitted changes across the repository
    # Usage: git-uncommitted
    # Example: git-uncommitted
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    echo "=== Uncommitted Changes ==="
    git status --porcelain | while read -r status file; do
        echo "[$status] $file"
    done

    if [ -n "$(git status --porcelain)" ]; then
        echo
        echo "=== Diff Summary ==="
        git diff --stat
    else
        echo "No uncommitted changes found."
    fi
}

git-recent-branches() {
    # Description: Show recently used git branches sorted by last commit
    # Usage: git-recent-branches [COUNT]
    # Example: git-recent-branches 10
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    local count="${1:-10}"

    if ! [[ "$count" =~ ^[0-9]+$ ]]; then
        echo "Error: COUNT must be a positive integer"
        return 1
    fi

    echo "Recently used branches:"
    git for-each-ref --count="$count" --sort=-committerdate refs/heads/ --format='%(refname:short) - %(committerdate:relative) - %(subject)'
}

git-file-history() {
    # Description: Show the git history for a specific file with diffs
    # Usage: git-file-history FILE_PATH
    # Example: git-file-history src/main.js
    if [ $# -eq 0 ]; then
        echo "Usage: git-file-history FILE_PATH"
        echo "Example: git-file-history src/main.js"
        return 1
    fi

    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    local file_path="$1"

    if [ ! -f "$file_path" ] && ! git ls-files --error-unmatch "$file_path" > /dev/null 2>&1; then
        echo "Error: File '$file_path' not found in git repository"
        return 1
    fi

    echo "Git history for: $file_path"
    git log --follow --patch --stat -- "$file_path"
}

project-init() {
    # Description: Initialize a new project with common development files
    # Usage: project-init PROJECT_NAME [LANGUAGE]
    # Example: project-init my-app javascript
    if [ $# -lt 1 ]; then
        echo "Usage: project-init PROJECT_NAME [LANGUAGE]"
        echo "Supported languages: javascript, python, rust, go, generic (default)"
        return 1
    fi

    local project_name="$1"
    local language="${2:-generic}"

    if [ -d "$project_name" ]; then
        echo "Error: Directory '$project_name' already exists"
        return 1
    fi

    mkdir -p "$project_name"
    cd "$project_name"

    # Initialize git
    git init

    # Create basic files
    echo "# $project_name" > README.md
    echo "node_modules/" > .gitignore
    echo ".env" >> .gitignore
    echo "*.log" >> .gitignore
    echo ".DS_Store" >> .gitignore

    # Language-specific initialization
    case "$language" in
        "javascript" | "js" | "node")
            echo '{"name": "'$project_name'", "version": "1.0.0", "description": "", "main": "index.js", "scripts": {"start": "node index.js", "test": "echo \"Error: no test specified\" && exit 1"}, "keywords": [], "author": "", "license": "MIT"}' | jq . > package.json 2> /dev/null || echo '{"name": "'$project_name'", "version": "1.0.0", "description": ""}' > package.json
            echo "dist/" >> .gitignore
            echo "build/" >> .gitignore
            echo "coverage/" >> .gitignore
            touch index.js
            ;;
        "python" | "py")
            echo "__pycache__/" >> .gitignore
            echo "*.pyc" >> .gitignore
            echo "*.pyo" >> .gitignore
            echo "venv/" >> .gitignore
            echo "env/" >> .gitignore
            echo ".pytest_cache/" >> .gitignore
            echo "*.egg-info/" >> .gitignore
            touch main.py
            echo "# Requirements" > requirements.txt
            ;;
        "rust")
            echo "/target" > .gitignore
            echo "Cargo.lock" >> .gitignore
            echo "**/*.rs.bk" >> .gitignore
            cargo init --name "$project_name" . 2> /dev/null || echo "Note: cargo not found, manual Cargo.toml creation needed"
            ;;
        "go")
            echo "# Go" > .gitignore
            echo "*.exe" >> .gitignore
            echo "*.exe~" >> .gitignore
            echo "*.dll" >> .gitignore
            echo "*.so" >> .gitignore
            echo "*.dylib" >> .gitignore
            echo "/vendor/" >> .gitignore
            go mod init "$project_name" 2> /dev/null || echo "Note: go not found, manual go.mod creation needed"
            touch main.go
            ;;
    esac

    # Create initial commit
    git add .
    git commit -m "Initial commit"

    echo "Project '$project_name' initialized with $language template"
    echo "Directory: $(pwd)"
}

dev-server() {
    # Description: Start a local development server based on project type
    # Usage: dev-server [PORT]
    # Example: dev-server 3000
    local port="${1:-8000}"

    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo "Error: Port must be a number between 1 and 65535"
        return 1
    fi

    if [ -f "package.json" ]; then
        echo "Detected Node.js project..."
        if command -v yarn > /dev/null 2>&1 && [ -f "yarn.lock" ]; then
            echo "Starting with yarn..."
            yarn start
        elif command -v npm > /dev/null 2>&1; then
            echo "Starting with npm..."
            npm start
        else
            echo "Error: Neither npm nor yarn found"
            return 1
        fi
    elif [ -f "Cargo.toml" ]; then
        echo "Detected Rust project..."
        if command -v cargo > /dev/null 2>&1; then
            echo "Starting with cargo..."
            cargo run
        else
            echo "Error: cargo not found"
            return 1
        fi
    elif [ -f "go.mod" ]; then
        echo "Detected Go project..."
        if command -v go > /dev/null 2>&1; then
            echo "Starting Go application..."
            go run .
        else
            echo "Error: go not found"
            return 1
        fi
    elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
        echo "Detected Python project..."
        if command -v python3 > /dev/null 2>&1; then
            echo "Starting Python development server on port $port..."
            python3 -m http.server "$port"
        else
            echo "Error: python3 not found"
            return 1
        fi
    else
        echo "No specific project type detected."
        if command -v python3 > /dev/null 2>&1; then
            echo "Starting generic HTTP server on port $port..."
            python3 -m http.server "$port"
        else
            echo "Error: python3 not found for generic server"
            return 1
        fi
    fi
}

code-stats() {
    # Description: Show code statistics for the current project
    # Usage: code-stats [DIRECTORY]
    # Example: code-stats src/
    local directory="${1:-.}"

    if [ ! -d "$directory" ]; then
        echo "Error: '$directory' is not a valid directory"
        return 1
    fi

    echo "Code statistics for: $(realpath "$directory")"
    echo "================================"

    # Count files by extension
    echo "Files by extension:"
    find "$directory" -type f -name "*.*" | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10

    echo
    echo "Total lines of code:"
    find "$directory" -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.go" -o -name "*.rs" -o -name "*.java" -o -name "*.c" -o -name "*.cpp" -o -name "*.h" \) -exec wc -l {} + | tail -1

    echo
    echo "Directory structure:"
    if command -v tree > /dev/null 2>&1; then
        tree -I 'node_modules|.git|target|__pycache__|.pytest_cache|vendor' "$directory" | head -20
    else
        find "$directory" -type d | head -10
    fi
}
