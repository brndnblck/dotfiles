_render_aliases() {
    # Description: Render alias matches with consistent formatting
    # Usage: _render_aliases MODULE_NAME MATCHES [SHOW_COMMENTS]
    local module_name="$1"
    local matches="$2"
    local show_comments="${3:-false}"
    
    echo -e "\e[1;36m=== $module_name ===\e[0m"
    
    local max_width=$(echo "$matches" | grep "^alias " | sed -E 's/^alias ([^=]+)=.*/\1/' | awk '{if(length > max) max = length} END {print max+0}')
    
    local in_multiline_alias=false
    local current_alias_name=""
    local first_line=true
    echo "$matches" | while IFS= read -r line; do
        if [[ "$line" =~ ^alias\ .* ]]; then
            local alias_name=$(echo "$line" | sed -E 's/^alias ([^=]+)=.*/\1/')
            local alias_cmd=$(echo "$line" | cut -d'=' -f2-)
            
            if [[ "$line" =~ \'\$$ ]] || [[ "$alias_cmd" =~ [^\\]\&\&\s*$ ]]; then
                in_multiline_alias=true
                current_alias_name="$alias_name"
                alias_cmd=$(echo "$alias_cmd" | sed 's/^["\x27]//' | sed 's/["\x27]$//' | tr '\n' ' ')
            else
                alias_cmd=$(echo "$alias_cmd" | sed 's/^["\x27]//' | sed 's/["\x27]$//')
            fi
            
            if [ ${#alias_cmd} -gt 80 ]; then
                alias_cmd="${alias_cmd:0:77}..."
            fi
            
            printf "\e[1;32m%-*s\e[0m \e[1;30m%s\e[0m\n" $max_width "$alias_name" "$alias_cmd"
        elif [[ "$in_multiline_alias" == true ]] && [[ "$line" =~ \'\;?\'?\s*$ ]]; then
            in_multiline_alias=false
            current_alias_name=""
        elif [[ "$in_multiline_alias" == false ]] && [[ "$show_comments" == true ]]; then
            if [[ "$line" =~ ^#.* ]] && [[ ! "$line" =~ ^#[[:space:]]*$ ]]; then
                if [[ "$first_line" != true ]]; then
                    echo
                fi
                echo -e "\e[1;34m$line\e[0m"
            fi
        fi
        first_line=false
    done
    echo
}

alias-help() {
    # Description: Search for and display help for specific aliases
    # Usage: alias-help SEARCH_TERM
    # Example: alias-help git
    echo
    if [ -d ~/.aliases.d ]; then
        for alias_file in ~/.aliases.d/*; do
            if [ -r "$alias_file" ]; then
                local module_name=$(basename "$alias_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_' ' ')
                local matches=$(awk -v RS='# ' -v IGNORECASE=1 '/'"$1"'/ {print "# "$0}' "$alias_file")
                if [ -n "$matches" ]; then
                    _render_aliases "$module_name" "$matches" true
                fi
            fi
        done
    fi
}

alias-search() {
    # Description: Search for aliases by name or command
    # Usage: alias-search SEARCH_TERM
    # Example: alias-search docker
    if [ $# -eq 0 ]; then
        echo "Usage: alias-search SEARCH_TERM"
        return 1
    fi
    
    echo
    if [ -d ~/.aliases.d ]; then
        for alias_file in ~/.aliases.d/*; do
            if [ -r "$alias_file" ]; then
                local module_name=$(basename "$alias_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_' ' ')
                local base_name=$(basename "$alias_file" .tmpl)
                
                local matches=$(grep -i "$1" "$alias_file" | grep "^alias ")
                local module_matches=false
                
                if [[ "$module_name" =~ .*$(echo "$1" | tr '[:lower:]' '[:upper:]').* ]] || [[ "$base_name" =~ .*$(echo "$1" | tr '[:upper:]' '[:lower:]').* ]]; then
                    module_matches=true
                    matches=$(grep "^alias " "$alias_file")
                fi
                
                if [ -n "$matches" ]; then
                    _render_aliases "$module_name" "$matches" false
                fi
            fi
        done
    fi
}

function-help() {
    # Description: Display help for all custom functions
    # Usage: function-help
    # Example: function-help
    echo
    if [ -d ~/.functions.d ]; then
        for function_file in ~/.functions.d/*; do
            if [ -r "$function_file" ]; then
                local module_name=$(basename "$function_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_' ' ')
                
                local function_blocks=$(awk '
                    /^function [a-zA-Z_-]+\(\)/ || /^[a-zA-Z_-]+\(\)/ {
                        func_name = $0
                        gsub(/^function /, "", func_name)
                        gsub(/\(\) .*/, "", func_name)
                        gsub(/\(\)/, "", func_name)
                        if (func_name !~ /^_/) {
                            print "FUNCTION:" func_name
                            while ((getline next_line) > 0) {
                                if (next_line ~ /^[[:space:]]*#/) {
                                    print next_line
                                } else {
                                    break
                                }
                            }
                            print ""
                        }
                    }
                ' "$function_file")
                
                if [ -n "$function_blocks" ]; then
                    echo -e "\e[1;36m=== $module_name ===\e[0m"
                    echo
                    
                    echo "$function_blocks" | while IFS= read -r line; do
                        if [[ "$line" =~ ^FUNCTION: ]]; then
                            local func_name="${line#FUNCTION:}"
                            echo -e "\e[1;32m$func_name\e[0m"
                        elif [[ "$line" =~ ^[[:space:]]*#[[:space:]]*Description: ]]; then
                            local description="${line#*Description: }"
                            echo -e "\e[1;30mDescription: $description\e[0m"
                        elif [[ "$line" =~ ^[[:space:]]*#[[:space:]]*Usage: ]]; then
                            local usage="${line#*Usage: }"
                            echo -e "\e[1;30mUsage: $usage\e[0m"
                        elif [[ "$line" =~ ^[[:space:]]*#[[:space:]]*Example: ]]; then
                            local example="${line#*Example: }"
                            echo -e "\e[1;30mExample: $example\e[0m"
                            echo
                        fi
                    done
                fi
            fi
        done
    fi
}