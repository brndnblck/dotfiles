# shellcheck shell=bash
# Centralized help and search system for dotfiles

_render-aliases() {
    # Description: Render alias matches with consistent formatting
    # Usage: _render-aliases MODULE_NAME MATCHES [SHOW_COMMENTS]
    # Example: _render-aliases "DEVELOPMENT" "$(grep '^alias' development.tmpl)" true
    local module_name="$1"
    local matches="$2"
    local show_comments="${3:-false}"

    echo -e "\e[1;36m=== $module_name ===\e[0m"

    local max_width
    max_width=$(echo "$matches" | grep "^alias " | sed -E 's/^alias ([^=]+)=.*/\1/' | awk '{if(length > max) max = length} END {print max+0}')

    local in_multiline_alias=false
    local first_line=true
    echo "$matches" | while IFS= read -r line; do
        if [[ "$line" =~ ^alias\ .* ]]; then
            local alias_name
            alias_name=$(echo "$line" | sed -E 's/^alias ([^=]+)=.*/\1/')
            local alias_cmd
            alias_cmd=$(echo "$line" | cut -d'=' -f2-)

            if [[ "$line" =~ \'\$$ ]] || [[ "$alias_cmd" =~ [^\\]\&\&\s*$ ]]; then
                in_multiline_alias=true
                alias_cmd=$(echo "$alias_cmd" | sed 's/^["\x27]//' | sed 's/["\x27]$//' | tr '\n' ' ')
            else
                alias_cmd=$(echo "$alias_cmd" | sed 's/^["\x27]//' | sed 's/["\x27]$//')
            fi

            if [ ${#alias_cmd} -gt 80 ]; then
                alias_cmd="${alias_cmd:0:77}..."
            fi

            printf "\e[1;32m%-*s\e[0m \e[1;30m%s\e[0m\n" "$max_width" "$alias_name" "$alias_cmd"
        elif [[ "$in_multiline_alias" == true ]] && [[ "$line" =~ \'\;?\'?\s*$ ]]; then
            in_multiline_alias=false
        elif [[ "$in_multiline_alias" == false ]] && [[ "$show_comments" == true ]]; then
            if [[ "$line" =~ ^#.* ]] && [[ ! "$line" =~ ^#[[:space:]]*$ ]]; then
                if [[ "$first_line" != true ]]; then
                    echo
                fi
                echo -e "\e[1;34m$line\e[0m"
            fi
        fi
        first_line=false
    done
    echo
}

_render-functions() {
    # Description: Render function matches with consistent formatting
    # Usage: _render-functions MODULE_NAME FUNCTION_BLOCKS
    # Example: _render-functions "SYSTEM UTILS" "$function_blocks"
    local module_name="$1"
    local function_blocks="$2"

    if [ -n "$function_blocks" ]; then
        echo -e "\e[1;36m=== $module_name ===\e[0m"
        echo

        echo "$function_blocks" | while IFS= read -r line; do
            if [[ "$line" =~ ^FUNCTION: ]]; then
                local func_name="${line#FUNCTION:}"
                echo -e "\e[1;32m$func_name\e[0m"
            elif [[ "$line" =~ ^[[:space:]]*#[[:space:]]*Description: ]]; then
                local description="${line#*Description: }"
                echo -e "\e[1;30mDescription: $description\e[0m"
            elif [[ "$line" =~ ^[[:space:]]*#[[:space:]]*Usage: ]]; then
                local usage="${line#*Usage: }"
                echo -e "\e[1;30mUsage: $usage\e[0m"
            elif [[ "$line" =~ ^[[:space:]]*#[[:space:]]*Example: ]]; then
                local example="${line#*Example: }"
                echo -e "\e[1;30mExample: $example\e[0m"
                echo
            fi
        done
    fi
}

alias-help() {
    # Description: Search for and display help for specific aliases with context
    # Usage: alias-help SEARCH_TERM
    # Example: alias-help git
    if [ $# -eq 0 ]; then
        echo "Usage: alias-help SEARCH_TERM"
        return 1
    fi

    echo
    if [ -d ~/.aliases.d ]; then
        for alias_file in ~/.aliases.d/*; do
            if [ -r "$alias_file" ]; then
                local module_name
                module_name=$(basename "$alias_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_-' ' ' | sed 's/  */ /g')
                local matches
                matches=$(awk -v RS='# ' -v IGNORECASE=1 '/'"$1"'/ {print "# "$0}' "$alias_file")
                if [ -n "$matches" ]; then
                    _render-aliases "$module_name" "$matches" true
                fi
            fi
        done
    fi
}

alias-search() {
    # Description: Search for aliases by name or command
    # Usage: alias-search SEARCH_TERM
    # Example: alias-search docker
    if [ $# -eq 0 ]; then
        echo "Usage: alias-search SEARCH_TERM"
        return 1
    fi

    echo
    if [ -d ~/.aliases.d ]; then
        for alias_file in ~/.aliases.d/*; do
            if [ -r "$alias_file" ]; then
                local module_name
                module_name=$(basename "$alias_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_-' ' ' | sed 's/  */ /g')
                local base_name
                base_name=$(basename "$alias_file" .tmpl)

                local matches
                matches=$(grep -i "$1" "$alias_file" | grep "^alias ")

                # Check if search term matches module name or filename for broader match
                if [[ "$module_name" =~ .*$(echo "$1" | tr '[:lower:]' '[:upper:]').* ]] || [[ "$base_name" =~ .*$(echo "$1" | tr '[:upper:]' '[:lower:]').* ]]; then
                    matches=$(grep "^alias " "$alias_file")
                fi

                if [ -n "$matches" ]; then
                    _render-aliases "$module_name" "$matches" false
                fi
            fi
        done
    fi
}

function-help() {
    # Description: Display help for all custom functions
    # Usage: function-help [SEARCH_TERM]
    # Example: function-help git
    echo
    local search_term="$1"

    if [ -d ~/.functions.d ]; then
        for function_file in ~/.functions.d/*; do
            if [ -r "$function_file" ]; then
                local module_name
                module_name=$(basename "$function_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_-' ' ' | sed 's/  */ /g')

                local function_blocks
                function_blocks=$(awk '
                    /^function [a-zA-Z_-]+\(\)/ || /^[a-zA-Z_-]+\(\)/ {
                        func_name = $0
                        gsub(/^function /, "", func_name)
                        gsub(/\(\) .*/, "", func_name)
                        gsub(/\(\)/, "", func_name)
                        if (func_name !~ /^_/) {
                            if (search_term == "" || tolower(func_name) ~ tolower(search_term)) {
                                print "FUNCTION:" func_name
                                while ((getline next_line) > 0) {
                                    if (next_line ~ /^[[:space:]]*#/) {
                                        print next_line
                                    } else {
                                        break
                                    }
                                }
                                print ""
                            }
                        }
                    }
                ' search_term="$search_term" "$function_file")

                _render-functions "$module_name" "$function_blocks"
            fi
        done
    fi
}

alias-list() {
    # Description: List all available aliases organized by category
    # Usage: alias-list [CATEGORY]
    # Example: alias-list development
    echo
    local category="$1"

    if [ -d ~/.aliases.d ]; then
        for alias_file in ~/.aliases.d/*; do
            if [ -r "$alias_file" ]; then
                local module_name
                module_name=$(basename "$alias_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_-' ' ' | sed 's/  */ /g')
                local base_name
                base_name=$(basename "$alias_file" .tmpl)

                if [ -z "$category" ] || [[ "$base_name" =~ .*"$category".* ]]; then
                    local matches
                    matches=$(grep "^alias " "$alias_file")
                    if [ -n "$matches" ]; then
                        _render-aliases "$module_name" "$matches" false
                    fi
                fi
            fi
        done
    fi
}

function-list() {
    # Description: List all available functions organized by category
    # Usage: function-list [CATEGORY]
    # Example: function-list development
    echo
    local category="$1"

    if [ -d ~/.functions.d ]; then
        for function_file in ~/.functions.d/*; do
            if [ -r "$function_file" ]; then
                local module_name
                module_name=$(basename "$function_file" .tmpl | tr '[:lower:]' '[:upper:]' | tr '_-' ' ' | sed 's/  */ /g')
                local base_name
                base_name=$(basename "$function_file" .tmpl)

                if [ -z "$category" ] || [[ "$base_name" =~ .*"$category".* ]]; then
                    local function_blocks
                    function_blocks=$(awk '
                        /^function [a-zA-Z_-]+\(\)/ || /^[a-zA-Z_-]+\(\)/ {
                            func_name = $0
                            gsub(/^function /, "", func_name)
                            gsub(/\(\) .*/, "", func_name)
                            gsub(/\(\)/, "", func_name)
                            if (func_name !~ /^_/) {
                                print "FUNCTION:" func_name
                                while ((getline next_line) > 0) {
                                    if (next_line ~ /^[[:space:]]*#/) {
                                        print next_line
                                    } else {
                                        break
                                    }
                                }
                                print ""
                            }
                        }
                    ' "$function_file")

                    _render-functions "$module_name" "$function_blocks"
                fi
            fi
        done
    fi
}